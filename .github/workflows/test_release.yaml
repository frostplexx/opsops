name: Test and Release
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run format check
        run: just fmt-check

      - name: Run linting
        run: just lint || true # Allow lint to fail for now

      - name: Run tests
        run: just test

      - name: Build
        run: just build

  build-linux:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - arch: x86_64
            runs-on: ubuntu-latest
            path: target/release/opsops
          - arch: aarch64
            runs-on: ubuntu-24.04-arm
            path: target/release/opsops
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Linux ${{ matrix.arch }} binary
        run: cargo build --release

      - name: Upload Linux ${{ matrix.arch }} binary
        uses: actions/upload-artifact@v4
        with:
          name: opsops-linux-${{ matrix.arch }}
          path: ${{ matrix.path }}
          if-no-files-found: error

  # Build macOS binaries using matrix
  build-macos:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
            path: target/release/opsops
          - arch: aarch64
            target: aarch64-apple-darwin
            path: target/aarch64-apple-darwin/release/opsops
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      # Build for the specified architecture
      - name: Build macOS ${{ matrix.arch }} binary
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # For x86_64, don't specify target (it's the default - specifying will break it)
            cargo build --release
          else
            # For other architectures, specify target
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Upload macOS ${{ matrix.arch }} binary
        uses: actions/upload-artifact@v4
        with:
          name: opsops-macos-${{ matrix.arch }}
          path: ${{ matrix.path }}
          if-no-files-found: error

  publish-release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
  
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(grep -m1 '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Prepare release binaries
        run: |
          mkdir -p release-binaries
          cp ./artifacts/opsops-linux-x86_64/opsops release-binaries/opsops-linux-x86_64
          cp ./artifacts/opsops-linux-aarch64/opsops release-binaries/opsops-linux-aarch64
          cp ./artifacts/opsops-macos-x86_64/opsops release-binaries/opsops-macos-x86_64
          cp ./artifacts/opsops-macos-aarch64/opsops release-binaries/opsops-macos-aarch64
          chmod +x release-binaries/*
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github @semantic-release/git conventional-changelog-conventionalcommits
      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "releaseRules": [
                    {
                      "type": "refactor",
                      "release": "patch"
                    },
                    {
                      "type": "docs",
                      "scope": "README",
                      "release": "patch"
                    },
                    {
                      "type": "test",
                      "release": "patch"
                    },
                    {
                      "type": "style",
                      "release": "patch"
                    },
                    {
                      "type": "perf",
                      "release": "patch"
                    },
                    {
                      "type": "ci",
                      "release": "patch"
                    },
                    {
                      "type": "build",
                      "release": "patch"
                    },
                    {
                      "type": "chore",
                      "release": "patch"
                    },
                    {
                      "type": "chore",
                      "scope": "deps",
                      "release": false
                    },
                    {
                      "type": "no-release",
                      "release": false
                    }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {
                        "type": "feat",
                        "section": ":sparkles: Features",
                        "hidden": false
                      },
                      {
                        "type": "fix",
                        "section": ":bug: Fixes",
                        "hidden": false
                      },
                      {
                        "type": "docs",
                        "section": ":memo: Documentation",
                        "hidden": false
                      },
                      {
                        "type": "style",
                        "section": ":barber: Code-style",
                        "hidden": false
                      },
                      {
                        "type": "refactor",
                        "section": ":zap: Refactor",
                        "hidden": false
                      },
                      {
                        "type": "perf",
                        "section": ":fast_forward: Performance",
                        "hidden": false
                      },
                      {
                        "type": "test",
                        "section": ":white_check_mark: Tests",
                        "hidden": false
                      },
                      {
                        "type": "ci",
                        "section": ":repeat: CI",
                        "hidden": true
                      },
                      {
                        "type": "chore",
                        "section": ":repeat: Chore",
                        "hidden": false
                      }
                    ]
                  }
                }
              ],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "release-binaries/opsops-linux-x86_64", "label": "opsops-linux-x86_64"},
                  {"path": "release-binaries/opsops-linux-aarch64", "label": "opsops-linux-aarch64"},
                  {"path": "release-binaries/opsops-macos-x86_64", "label": "opsops-macos-x86_64"},
                  {"path": "release-binaries/opsops-macos-aarch64", "label": "opsops-macos-aarch64"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["Cargo.toml", "Cargo.lock"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          EOF
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release

      - name: Update Homebrew Formula
        run: |
          FORMULA_PATH=/tmp/homebrew-tap/Formula/opsops.rb
          # Clone the Homebrew Tap repository
          git clone https://github.com/frostplexx/homebrew-tap.git /tmp/homebrew-tap
          
          # Navigate into the repository
          cd /tmp/homebrew-tap
          # Configure Git for the remote repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fetch the latest changes to ensure we have the most up-to-date branch
          git fetch origin main
          
          # Checkout to the main branch
          git checkout main
          
          # Update version in the formula
          sed -i "s|^  version \".*\"|  version \"${VERSION#v}\"|" $FORMULA_PATH
          
          # Update ARM64 URL and SHA256
          if [ -n "${{ env.ARM64_SHA256 }}" ]; then
            ARM64_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/opsops-macos-aarch64"
            sed -i '' "/Hardware::CPU.arm/,/sha256/ s|url \".*\"|url \"$ARM64_URL\"|" $FORMULA_PATH
            sed -i '' "/Hardware::CPU.arm/,/sha256/ s|sha256 \".*\"|sha256 \"${{ env.ARM64_SHA256 }}\"|" $FORMULA_PATH
          fi
          
          # Update x86_64 URL and SHA256
          if [ -n "${{ env.X86_64_SHA256 }}" ]; then
            X86_64_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/opsops-macos-x86_64"
            sed -i '' "/Hardware::CPU.intel/,/sha256/ s|url \".*\"|url \"$X86_64_URL\"|" $FORMULA_PATH
            sed -i '' "/Hardware::CPU.intel/,/sha256/ s|sha256 \".*\"|sha256 \"${{ env.X86_64_SHA256 }}\"|" $FORMULA_PATH
          fi
          
          # Stage the changes
          git add $FORMULA_PATH
          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com" > ~/.git-credentials
          
          # Only commit and push if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Update formula for version ${{ env.VERSION }}"
            
            # Push using the token for authentication
            git push https://github.com/frostplexx/homebrew-tap.git HEAD:main
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          VERSION: ${{ env.VERSION }}

      - name: Update NixKit Module
        run: |
          set -euo pipefail
      
          NIXKIT_PATH=/tmp/nixkit
          NIX_MODULE_PATH=$NIXKIT_PATH/modules/shared/opsops/default.nix
      
          # Clone the NixKit repository
          git clone https://github.com/frostplexx/nixkit.git $NIXKIT_PATH
      
          # Navigate into the repository
          cd $NIXKIT_PATH
      
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin main
          git checkout main
      
          # Ensure the target file exists before modifying
          if [ ! -f "$NIX_MODULE_PATH" ]; then
            echo "ERROR: $NIX_MODULE_PATH not found!"
            exit 1
          fi
      
          # Strip 'v' prefix from VERSION
          VERSION_STRIPPED="${VERSION#v}"
      
          # Update the version line
          sed -i "s|version = \".*\";|version = \"${VERSION_STRIPPED}\";|" "$NIX_MODULE_PATH"
      
          # Update the Git revision
          sed -i "s|rev = \".*\";|rev = \"${VERSION}\";|" "$NIX_MODULE_PATH"
      
          # Update the src hash if provided
          if [ -n "${SRC_HASH:-}" ]; then
            sed -i "s|sha256 = \".*\";|sha256 = \"${SRC_HASH}\";|" "$NIX_MODULE_PATH"
          fi
      
          # Update the cargo hash if provided
          if [ -n "${CARGO_HASH:-}" ]; then
            sed -i "s|cargoHash = \".*\";|cargoHash = \"${CARGO_HASH}\";|" "$NIX_MODULE_PATH"
          fi
      
          # Commit and push changes if any
          git add "$NIX_MODULE_PATH"
          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com" > ~/.git-credentials
      
          if ! git diff --cached --quiet; then
            git commit -m "Update opsops module for version $VERSION"
            git push https://github.com/frostplexx/nixkit.git HEAD:main
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          VERSION: ${{ env.VERSION }}
