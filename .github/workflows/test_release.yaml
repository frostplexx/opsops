name: Test and Release
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run format check
        run: just fmt-check

      - name: Run linting
        run: just lint

      - name: Run tests
        run: just test


  build-linux:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - arch: x86_64
            runs-on: ubuntu-latest
            path: target/release/opsops
          - arch: aarch64
            runs-on: ubuntu-24.04-arm
            path: target/release/opsops
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Linux ${{ matrix.arch }} binary
        run: cargo build --release

      - name: Upload Linux ${{ matrix.arch }} binary
        uses: actions/upload-artifact@v4
        with:
          name: opsops-linux-${{ matrix.arch }}
          path: ${{ matrix.path }}
          if-no-files-found: error

  # Build macOS binaries using matrix
  build-macos:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
            path: target/release/opsops
          - arch: aarch64
            target: aarch64-apple-darwin
            path: target/aarch64-apple-darwin/release/opsops
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      # Build for the specified architecture
      - name: Build macOS ${{ matrix.arch }} binary
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # For x86_64, don't specify target (it's the default - specifying will break it)
            cargo build --release
          else
            # For other architectures, specify target
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Upload macOS ${{ matrix.arch }} binary
        uses: actions/upload-artifact@v4
        with:
          name: opsops-macos-${{ matrix.arch }}
          path: ${{ matrix.path }}
          if-no-files-found: error

  publish-release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release binaries
        run: |
          mkdir -p release-binaries
          cp ./artifacts/opsops-linux-x86_64/opsops release-binaries/opsops-linux-x86_64
          cp ./artifacts/opsops-linux-aarch64/opsops release-binaries/opsops-linux-aarch64
          cp ./artifacts/opsops-macos-x86_64/opsops release-binaries/opsops-macos-x86_64
          cp ./artifacts/opsops-macos-aarch64/opsops release-binaries/opsops-macos-aarch64
          chmod +x release-binaries/*
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install semantic-release and plugins
        run: |
          npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github @semantic-release/git conventional-changelog-conventionalcommits
      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "releaseRules": [
                    {
                      "type": "refactor",
                      "release": "patch"
                    },
                    {
                      "type": "docs",
                      "scope": "README",
                      "release": "patch"
                    },
                    {
                      "type": "test",
                      "release": "patch"
                    },
                    {
                      "type": "style",
                      "release": "patch"
                    },
                    {
                      "type": "perf",
                      "release": "patch"
                    },
                    {
                      "type": "ci",
                      "release": "patch"
                    },
                    {
                      "type": "build",
                      "release": "patch"
                    },
                    {
                      "type": "chore",
                      "release": "patch"
                    },
                    {
                      "type": "chore",
                      "scope": "deps",
                      "release": false
                    },
                    {
                      "type": "no-release",
                      "release": false
                    }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {
                        "type": "feat",
                        "section": ":sparkles: Features",
                        "hidden": false
                      },
                      {
                        "type": "fix",
                        "section": ":bug: Fixes",
                        "hidden": false
                      },
                      {
                        "type": "docs",
                        "section": ":memo: Documentation",
                        "hidden": false
                      },
                      {
                        "type": "style",
                        "section": ":barber: Code-style",
                        "hidden": false
                      },
                      {
                        "type": "refactor",
                        "section": ":zap: Refactor",
                        "hidden": false
                      },
                      {
                        "type": "perf",
                        "section": ":fast_forward: Performance",
                        "hidden": false
                      },
                      {
                        "type": "test",
                        "section": ":white_check_mark: Tests",
                        "hidden": false
                      },
                      {
                        "type": "ci",
                        "section": ":repeat: CI",
                        "hidden": true
                      },
                      {
                        "type": "chore",
                        "section": ":repeat: Chore",
                        "hidden": false
                      }
                    ]
                  }
                }
              ],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "release-binaries/opsops-linux-x86_64", "label": "opsops-linux-x86_64"},
                  {"path": "release-binaries/opsops-linux-aarch64", "label": "opsops-linux-aarch64"},
                  {"path": "release-binaries/opsops-macos-x86_64", "label": "opsops-macos-x86_64"},
                  {"path": "release-binaries/opsops-macos-aarch64", "label": "opsops-macos-aarch64"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["Cargo.toml", "Cargo.lock"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          EOF
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release
